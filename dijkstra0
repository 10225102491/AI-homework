#include<stdio.h>
#include<stdlib.h>
const long long inf = 1e18;
int p=0;
int ans[100010];
struct lis{
	int val;
	int step;
	struct lis* next;
};
inline struct lis* create(int val,int step){
	struct lis* temp = (struct lis*)malloc(sizeof(struct lis));
	temp->next=NULL;
	temp->step=step;
	temp->val=val;
	return temp;
}
struct Node{
	int edge;
	int from;
	long long step;
}node[150010];
struct edge{
	int val;
	int next;
	long long lenth;
}e[300010];
inline void connect(int from,int to,long long lenth,int id){
	e[id].val = to;
	e[id].next = node[from].edge;
	e[id].lenth = lenth;
	node[from].edge = id;
}
inline int top(struct lis* head){
	return head->val;
}
inline struct lis* pop(struct lis* head){
	head = head->next;
	return head;
}
struct lis* push(struct lis* head, int val, long long lenth){
	if(head==NULL) 
		return create(val,lenth);
	struct lis* item,*temp = head;
	while(temp->next&&temp->step<=lenth)
		temp = temp->next;
	if(temp->step>lenth){
		item = create(temp->val,temp->step);
		item->next = temp->next;
		temp->val = val;
		temp->step = lenth;
		temp->next = item;
	}else{
		item = create(val,lenth);
		temp->next = item;
	}
	return head;
}
int main(){
	int n,m,t1,t2;
	long long l;
	scanf("%d %d",&n,&m);
	for(int i=0;i<=n;i++){
		node[i].edge = -1;
		node[i].step = inf;
		node[i].from = -1;
	}
	for(int i=0;i<m;i++){
		scanf("%d %d %lld",&t1,&t2,&l);
		if(t1==t2) 
			continue;
		connect(t1,t2,l,i);
	}
	struct lis* head = create(1,0);
	node[1].step=0;
	while(head&&head->val!=n){
		t2 = top(head);
		head = pop(head);
		t1 = node[t2].edge;
		while(~t1){
			if(node[e[t1].val].step > node[t2].step + e[t1].lenth){
				node[e[t1].val].from = t2;
				node[e[t1].val].step = node[t2].step + e[t1].lenth;
				head = push(head,e[t1].val,node[t2].step + e[t1].lenth);
			}
			t1=e[t1].next;
		}
		node[t2].edge=-1;
	}
	printf("%d\n",node[n].step==inf?-1:node[n].step);
	/*if(node[n].from==-1)
	    printf("-1");
	else{
	    t1=0;t2=n;
	    while(t2!=1){
		    ans[t1++]=t2;
		    t2=node[t2].from;
	    }
	    ans[t1] = 1;
	    printf("%d",ans[t1--]);
	    while(~t1)
		    printf(" %d",ans[t1--]);
	}*/
	return 0;
}
