#include<stdio.h>
#include<stdlib.h>
long long terminal = 123456789;//123894765;
struct hash{
	long long val;
	int used;
}states[4000010];
struct lis{
	long long val;
	int steps;
	struct lis* next;
};
int findkey(long long n){
	long long mod = 4000007,key;
	key = n%mod;
	while(states[key].val&&states[key].val!=n) key++;
	if(states[key].val != n) states[key].used = -1;
	states[key].val = n;
	return int(key);  
}
int findCondition(long long t){
	int condition = 1;
	while(t%10!=9){
		t/=10;
		condition ++;
	}
	return 9-condition;
}
long long getNewNum(int x1,int y1,int x2,int y2,long long t){
	if(x1<0||x1>2||y1<0||y1>2) return -1;
	long long tmp[3][3],digit;
	for(int i=8;i>-1;i--){
		tmp[i/3][i%3] = t%10;
		t/=10;
	}
	digit = tmp[x1][y1];
	tmp[x1][y1] = tmp[x2][y2];
	tmp[x2][y2] = digit;
	for(int i=0;i<9;i++){
		t*=10;
		t+=tmp[i/3][i%3];
	}
	int key = findkey(t);
	if(!~states[key].used)
		states[key].used = 1;
	else
		t = -1;
	return t;
}
struct lis* addNextState(struct lis* tail,int steps,long long t){
	long long newnum;
	int der[4][2] = {{1,0},{0,1},{-1,0},{0,-1}},condition = findCondition(t);
	for(int i=0;i<4;i++){
		newnum = getNewNum(condition/3+der[i][0],condition%3+der[i][1],condition/3,condition%3,t);
		if(~newnum){
			struct lis* tmp = (struct lis*)malloc(sizeof(struct lis));
			tmp->val = newnum;
			tmp->next = NULL;
			tmp->steps = steps;
			tail->next = tmp;
			tail = tail ->next;
		}
	}
	return tail;
}
int main(){
	long long state = 0;
	char t;
	for(int i=0;i<9;i++){
		state *= 10;
		scanf("%c",&t);
		if(t=='x'||t=='0') state += 9;
		else state += t-'0';
	}
	struct lis* head =(struct lis*)malloc(sizeof(struct lis));
	struct lis* tail = head;
	head->val = state;
	head->steps = 0;
	head->next = NULL;
	while(head&&head->val!=terminal){
		tail = addNextState(tail,head->steps+1,head->val);
		head = head->next;
	}
	if(head) printf("%d\n",head->steps);
	else printf("-1\n");
	return 0;
}
